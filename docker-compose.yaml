# Licensed to the Apache Software Foundation (ASF) under one

x-airflow-common:
  &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.10.4}
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: $AIRFLOW__CORE__EXECUTOR
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: $AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
    AIRFLOW__CELERY__RESULT_BACKEND: $AIRFLOW__CELERY__RESULT_BACKEND
    AIRFLOW__CELERY__BROKER_URL: $AIRFLOW__CELERY__BROKER_URL
    AIRFLOW__CORE__FERNET_KEY: $AIRFLOW__CORE__FERNET_KEY
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: $AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION
    AIRFLOW__CORE__LOAD_EXAMPLES: $AIRFLOW__CORE__LOAD_EXAMPLES
    AIRFLOW__API__AUTH_BACKENDS: $AIRFLOW__API__AUTH_BACKENDS
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: $AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres-airflow:
      condition: service_healthy

services:
  # database for Airflow
  postgres-airflow:
    image: postgres:13
    environment:
      POSTGRES_USER: $AIRFLOW_POSTGRES_USER
      POSTGRES_PASSWORD: $AIRFLOW_POSTGRES_PASSWORD
      POSTGRES_DB: $AIRFLOW_POSTGRES_DB
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  # database for dbt
  postgres-dbt:
    image: postgres:13
    ports:
      - "5435:5432"
    environment:
      POSTGRES_USER: $DBT_POSTGRES_USER
      POSTGRES_PASSWORD: $DBT_POSTGRES_PASSWORD
      POSTGRES_DB: $DBT_POSTGRES_DB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dbtpostgres -d dbtpostgres"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    volumes:
      # - dbtpostgres:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]

  # container for the dbt Python scripts
  dbt-container:
    image: python:3.11-slim
    build:
      context: ./dbt/
      dockerfile: Dockerfile
    environment:
      DB_TYPE: $DBT_DB_TYPE
      DB_PORT: $DBT_DB_PORT
      DB_HOST: $DBT_DB_HOST
      DB_USER: $DBT_DB_USER
      DB_PASSWORD: $DBT_DB_PASSWORD
      DB_NAME: $DBT_DB_NAME
      DB_SCHEMA: $DBT_DB_SCHEMA

  redis:
    # Redis is limited to 7.2-bookworm due to licencing change
    # https://redis.io/blog/redis-adopts-dual-source-available-licensing/
    image: redis:7.2-bookworm
    expose:
      - $AIRFLOW_REDIS_PORT
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "$AIRFLOW_WEBSERVER_PORT_OUT:$AIRFLOW_WEBSERVER_PORT_IN"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:$AIRFLOW_WEBSERVER_PORT_IN/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:$AIRFLOW_SCHEDULER_PORT/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      # yamllint disable rule:line-length
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: $_AIRFLOW_DB_MIGRATE
      _AIRFLOW_WWW_USER_CREATE: $_AIRFLOW_WWW_USER_CREATE
      _AIRFLOW_WWW_USER_USERNAME: $_AIRFLOW_WWW_USER_USERNAME
      _AIRFLOW_WWW_USER_PASSWORD: $_AIRFLOW_WWW_USER_PASSWORD
      _PIP_ADDITIONAL_REQUIREMENTS: $_PIP_ADDITIONAL_REQUIREMENTS
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow

  # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
  # or by explicitly targeted on the command line e.g. docker-compose up flower.
  # See: https://docs.docker.com/compose/profiles/
  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - "$FLOWER_PORT_OUT:$FLOWER_PORT_IN"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:$FLOWER_PORT_IN/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

volumes:
  postgres-db-volume:
